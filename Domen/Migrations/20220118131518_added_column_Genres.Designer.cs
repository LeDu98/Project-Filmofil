// <auto-generated />
using System;
using Domen;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domen.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20220118131518_added_column_Genres")]
    partial class added_column_Genres
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domen.Acting", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<double>("Income")
                        .HasColumnType("float");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Acting");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            MovieId = 1,
                            Income = 7.5,
                            Role = "Police officer"
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 1,
                            Income = 2.5,
                            Role = "Laywer"
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 1,
                            Income = 4.0,
                            Role = "Judge"
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 2,
                            Income = 10.5,
                            Role = "Don"
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 2,
                            Income = 1.5,
                            Role = "Laywer"
                        },
                        new
                        {
                            ActorId = 7,
                            MovieId = 2,
                            Income = 0.75,
                            Role = "Dautgher"
                        },
                        new
                        {
                            ActorId = 8,
                            MovieId = 3,
                            Income = 12.5,
                            Role = "Batman"
                        },
                        new
                        {
                            ActorId = 6,
                            MovieId = 3,
                            Income = 2.5,
                            Role = "Jane Hawkins"
                        },
                        new
                        {
                            ActorId = 7,
                            MovieId = 3,
                            Income = 4.0,
                            Role = "Adam"
                        },
                        new
                        {
                            ActorId = 1,
                            MovieId = 4,
                            Income = 7.2000000000000002,
                            Role = "Legolas"
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 4,
                            Income = 5.5,
                            Role = "Witch"
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 4,
                            Income = 5.0,
                            Role = "Gremlin"
                        });
                });

            modelBuilder.Entity("Domen.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "United States"
                        },
                        new
                        {
                            CountryId = 2,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            CountryId = 3,
                            Name = "France"
                        });
                });

            modelBuilder.Entity("Domen.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Domen.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("StreamingServiceId")
                        .HasColumnType("int");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.Property<string>("Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trailer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieId");

                    b.HasIndex("StreamingServiceId");

                    b.HasIndex("StudioId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            Duration = 142,
                            Name = "The Shawshank Redemption",
                            Rating = 9.3000000000000007,
                            StreamingServiceId = 1,
                            StudioId = 1,
                            Synopsis = "Chronicles the experiences of a formerly successful banker as a prisoner in the gloomy jailhouse of Shawshank after being found guilty of a crime he did not commit. The film portrays the man's unique way of dealing with his new, torturous life; along the way he befriends a number of fellow prisoners, most notably a wise long-term inmate named Red",
                            Thumbnail = "shawshank.png",
                            Trailer = "https://www.youtube.com/watch?v=6hB3S9bIaco",
                            Year = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1994)
                        },
                        new
                        {
                            MovieId = 2,
                            Duration = 175,
                            Name = "The Godfather",
                            Rating = 9.0999999999999996,
                            StreamingServiceId = 2,
                            StudioId = 2,
                            Synopsis = "The Godfather Don Vito Corleone is the head of the Corleone mafia family in New York. He is at the event of his daughter's wedding. Michael, Vito's youngest son and a decorated WW II Marine is also present at the wedding. Michael seems to be uninterested in being a part of the family business. Vito is a powerful man, and is kind to all those who give him respect but is ruthless against those who do not. But when a powerful and treacherous rival wants to sell drugs and needs the Don's influence for the same, Vito refuses to do it. What follows is a clash between Vito's fading old values and the new ways which may cause Michael to do the thing he was most reluctant in doing and wage a mob war against all the other mafia families which could tear the Corleone family apart.",
                            Thumbnail = "godfather.jpg",
                            Trailer = "https://www.youtube.com/watch?v=sY1S34973zA",
                            Year = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1972)
                        },
                        new
                        {
                            MovieId = 3,
                            Duration = 152,
                            Name = "The Dark Knight",
                            Rating = 9.0,
                            StreamingServiceId = 3,
                            StudioId = 3,
                            Synopsis = "Set within a year after the events of Batman Begins (2005), Batman, Lieutenant James Gordon, and new District Attorney Harvey Dent successfully begin to round up the criminals that plague Gotham City, until a mysterious and sadistic criminal mastermind known only as The Joker appears in Gotham, creating a new wave of chaos. Batman's struggle against The Joker becomes deeply personal, forcing him to confront everything he believes and improve his technology to stop him. A love triangle develops between Bruce Wayne, Dent, and Rachel Dawes.",
                            Thumbnail = "darkKnight.png",
                            Trailer = "https://www.youtube.com/watch?v=EXeTwQWrcwY",
                            Year = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2008)
                        },
                        new
                        {
                            MovieId = 4,
                            Duration = 201,
                            Name = "The Lord of the Rings: The Return of the King",
                            Rating = 8.9000000000000004,
                            StreamingServiceId = 4,
                            StudioId = 4,
                            Synopsis = "The final confrontation between the forces of good and evil fighting for control of the future of Middle-earth. Frodo and Sam reach Mordor in their quest to destroy the One Ring, while Aragorn leads the forces of good against Sauron's evil army at the stone city of Minas Tirith.",
                            Thumbnail = "LOTR-3-The-Return-of-the-King-icon.png",
                            Trailer = "https://www.youtube.com/watch?v=r5X-hFf6Bwo",
                            Year = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2003)
                        });
                });

            modelBuilder.Entity("Domen.MovieGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenre");
                });

            modelBuilder.Entity("Domen.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Born")
                        .HasColumnType("datetime2");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.HasIndex("CountryId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Domen.Position", b =>
                {
                    b.Property<int>("PersonnelId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("PositionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonnelId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Domen.Review", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Domen.SiteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domen.StreamingService", b =>
                {
                    b.Property<int>("StreamingServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Founded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headquarter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StreamingServiceId");

                    b.ToTable("StreamingService");

                    b.HasData(
                        new
                        {
                            StreamingServiceId = 1,
                            Founded = new DateTime(1997, 8, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Headquarter = "Los Gatos, California, United States",
                            LogoImg = "netflix.png",
                            Name = "Netflix",
                            Price = 17.989999999999998,
                            Website = "https://netflix.com/"
                        },
                        new
                        {
                            StreamingServiceId = 2,
                            Founded = new DateTime(2006, 9, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Headquarter = "Seattle, Washington, United States",
                            LogoImg = "amazon-prime-video.png",
                            Name = "Amazon Prime Video",
                            Price = 12.99,
                            Website = "https://www.primevideo.com/"
                        },
                        new
                        {
                            StreamingServiceId = 3,
                            Founded = new DateTime(2019, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Headquarter = "Burbank, California, United States",
                            LogoImg = "disney-plus.png",
                            Name = "Disney+",
                            Price = 7.9900000000000002,
                            Website = "https://www.disneyplus.com/"
                        },
                        new
                        {
                            StreamingServiceId = 4,
                            Founded = new DateTime(1972, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Headquarter = "New York, New York, United States",
                            LogoImg = "hbo.png",
                            Name = "HBO",
                            Price = 9.9900000000000002,
                            Website = "https://www.hbo.com/"
                        },
                        new
                        {
                            StreamingServiceId = 5,
                            Founded = new DateTime(2019, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Headquarter = "New York, New York, United States",
                            LogoImg = "apple tv.png",
                            Name = "Apple TV+",
                            Price = 4.9900000000000002,
                            Website = "https://www.apple.com/apple-tv-plus/"
                        });
                });

            modelBuilder.Entity("Domen.Studio", b =>
                {
                    b.Property<int>("StudioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Founded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Headquarter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudioId");

                    b.ToTable("Studio");

                    b.HasData(
                        new
                        {
                            StudioId = 1,
                            Founded = new DateTime(1912, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Headquarter = "Universal City, California, United States",
                            LogoImg = "universal.png",
                            Name = "Universal Pictures",
                            Website = "https://www.universalpictures.com/"
                        },
                        new
                        {
                            StudioId = 2,
                            Founded = new DateTime(1923, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Headquarter = "Burbank, California, United States",
                            LogoImg = "Warner_Bros._(2019)_logo.svg.png",
                            Name = "Warner Bros. Pictures",
                            Website = "https://www.warnerbros.com/"
                        },
                        new
                        {
                            StudioId = 3,
                            Founded = new DateTime(1987, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Headquarter = "Culver City, California, United States",
                            LogoImg = "1200px-Sony_Pictures_Television_logo.svg.png",
                            Name = "Sony Pictures",
                            Website = "https://www.sonypictures.com/"
                        },
                        new
                        {
                            StudioId = 4,
                            Founded = new DateTime(1935, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Headquarter = "Los Angeles, California, United States",
                            LogoImg = "20th_Century_Studios_2020_logo.jpg",
                            Name = "20th Century Studios",
                            Website = "https://www.20thcenturystudios.com/"
                        },
                        new
                        {
                            StudioId = 5,
                            Founded = new DateTime(1923, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Headquarter = "Burbank, California, United States",
                            LogoImg = "Walt_Disney_Pictures_2011_logo.png",
                            Name = "Walt Disney Pictures",
                            Website = "https://www.waltdisneystudios.com/"
                        },
                        new
                        {
                            StudioId = 6,
                            Founded = new DateTime(1924, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Headquarter = "Los Angeles, California, United States",
                            LogoImg = "Metro-Goldwyn-Mayer_logo.png",
                            Name = "Metro-Goldwyn-Mayer",
                            Website = "https://www.mgm.com/"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domen.Actor", b =>
                {
                    b.HasBaseType("Domen.Person");

                    b.Property<double>("Networth")
                        .HasColumnType("float");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            Born = new DateTime(1974, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 1,
                            FirstName = "Leonardo",
                            Image = "diCaprio.jpg",
                            LastName = "DiCaprio",
                            Networth = 260.0
                        },
                        new
                        {
                            PersonId = 2,
                            Born = new DateTime(1990, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 1,
                            FirstName = "Jennifer",
                            Image = "jennifer-lawrence_gettyimages-626382596jpg.jpg",
                            LastName = "Lawrence",
                            Networth = 160.0
                        },
                        new
                        {
                            PersonId = 3,
                            Born = new DateTime(1949, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 1,
                            FirstName = "Meryl",
                            Image = "merylStreep.jpg",
                            LastName = "Streep",
                            Networth = 160.0
                        },
                        new
                        {
                            PersonId = 4,
                            Born = new DateTime(1983, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 1,
                            FirstName = "Jonah",
                            Image = "jonahHill.jpg",
                            LastName = "Hill",
                            Networth = 50.0
                        },
                        new
                        {
                            PersonId = 6,
                            Born = new DateTime(2001, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 2,
                            FirstName = "Freya",
                            Image = "freyaAllan.jpg",
                            LastName = "Allan",
                            Networth = 0.5
                        },
                        new
                        {
                            PersonId = 7,
                            Born = new DateTime(1990, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 3,
                            FirstName = "Emma",
                            Image = "emmaWatson.jpg",
                            LastName = "Watson",
                            Networth = 85.0
                        },
                        new
                        {
                            PersonId = 8,
                            Born = new DateTime(1989, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 2,
                            FirstName = "Daniel",
                            Image = "danielRadcliffe.jfif",
                            LastName = "Radcliffe",
                            Networth = 110.0
                        });
                });

            modelBuilder.Entity("Domen.Personnel", b =>
                {
                    b.HasBaseType("Domen.Person");

                    b.Property<string>("Trademark")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Personnel");

                    b.HasData(
                        new
                        {
                            PersonId = 5,
                            Born = new DateTime(1968, 4, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CountryId = 1,
                            FirstName = "Adam",
                            LastName = "McKay",
                            Trademark = "Often begins his movies with a quote. Frequently works with Christian Bale, Steve Carell and Will Ferrell. Fast editing style."
                        });
                });

            modelBuilder.Entity("Domen.Acting", b =>
                {
                    b.HasOne("Domen.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domen.Movie", "Movie")
                        .WithMany("Actings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domen.Movie", b =>
                {
                    b.HasOne("Domen.StreamingService", "StreamingService")
                        .WithMany()
                        .HasForeignKey("StreamingServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domen.Studio", "Studio")
                        .WithMany()
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreamingService");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("Domen.MovieGenre", b =>
                {
                    b.HasOne("Domen.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domen.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Domen.Person", b =>
                {
                    b.HasOne("Domen.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Domen.Position", b =>
                {
                    b.HasOne("Domen.Movie", "Movie")
                        .WithMany("Positions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domen.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("Domen.Review", b =>
                {
                    b.HasOne("Domen.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domen.SiteUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domen.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domen.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domen.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domen.SiteUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domen.Actor", b =>
                {
                    b.HasOne("Domen.Person", null)
                        .WithOne()
                        .HasForeignKey("Domen.Actor", "PersonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domen.Personnel", b =>
                {
                    b.HasOne("Domen.Person", null)
                        .WithOne()
                        .HasForeignKey("Domen.Personnel", "PersonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domen.Movie", b =>
                {
                    b.Navigation("Actings");

                    b.Navigation("Genres");

                    b.Navigation("Positions");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
